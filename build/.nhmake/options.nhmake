// INITIALIZE ======================================================================================

"Initialize external Netzhaut resources."
--init
{
    chdir("external")

    // Download Vulkan headers.
    system("wget -O tmp.zip https://github.com/KhronosGroup/Vulkan-Headers/archive/v1.3.220.zip")
    system("unzip -o tmp.zip")

    // Download volk, a Vulkan meta loader.
    system("wget -O tmp.zip https://github.com/zeux/volk/archive/master.zip")
    system("unzip -o tmp.zip")

    // Download OpenGL meta loader. Currently disabled because we made changes to it that are not in upstream.
    // system("wget -O tmp.zip https://github.com/tsherif/simple-opengl-loader/archive/master.zip")
    // system("unzip -o tmp.zip")

    // Clean downloads.
    system("rm tmp.zip")

    // Copy Vulkan related includes.
    chdir()
    copy("external/volk-master/volk.h", "src/lib/nhgfx/Common/Vulkan")
    copy("external/Vulkan-Headers-1.3.220/include/vulkan/*", "src/lib/nhgfx/Common/Vulkan")

    // Copy OpenGL related includes.
    chdir()
    copy("external/simple-opengl-loader-master/simple-opengl-loader.h", "src/lib/nhgfx/Common/OpenGL")
    copy("external/glx/glx.h", "src/lib/nhgfx/Common/OpenGL")
    copy("external/glx/glxext.h", "src/lib/nhgfx/Common/OpenGL")
 
    // Compile xxd.
    chdir("external/xxd")
    system("gcc -o xxd xxd.c")

    // Compile freetype-gl.
    chdir("../../external/freetype-gl")
    system("gcc -fPIC -I/usr/include/freetype2 -c -o utf8-utils.o utf8-utils.c -lfreetype")
    system("gcc -fPIC -I/usr/include/freetype2 -c -o vector.o vector.c -lfreetype")
    system("gcc -fPIC -I/usr/include/freetype2 -c -o texture-atlas.o texture-atlas.c -lfreetype")
    system("gcc -fPIC -I/usr/include/freetype2 -c -o texture-font.o texture-font.c -I/usr/include/harfbuzz -lfreetype -lharfbuzz")
    system("gcc -fPIC -I/usr/include/freetype2 -c -o distance-field.o distance-field.c -lfreetype")
    system("gcc -fPIC -I/usr/include/freetype2 -c -o edtaa3func.o edtaa3func.c -lfreetype")
    system("gcc -fPIC -I/usr/include/freetype2 -c -o platform.o platform.c -lfreetype")
    system("gcc -shared utf8-utils.o vector.o texture-atlas.o texture-font.o distance-field.o edtaa3func.o platform.o -I/usr/include/freetype2 -lfreetype -lharfbuzz -o libfreetype-gl.so")

    // Compile C hashmap.
    chdir("../../external/c_hashmap")
    system("gcc -c -o hashmap.o hashmap.c")
    system("ar rcs libc_hashmap.a hashmap.o")

    //  Compile volk.
    chdir("../../external/volk-master")
    system("gcc -c -o volk.o volk.c -ldl -DVK_VERSION_1_2 -DVK_USE_PLATFORM_XLIB_KHR -DVK_KHR_xlib_surface -DVOLK_VULKAN_H_PATH=\\\"../Vulkan-Headers-1.3.220/include/vulkan/vulkan.h\\\"")
    system("ar rcs libvolk.a volk.o")

    // Compile st-0.8.5.
    chdir("../../external/st-0.8.5")
    system("gcc -fPIC -c -o st.o st.c")
    system("gcc -shared st.o -o libst.so")

    chdir()
}

// DEVELOPMENT =====================================================================================

"Initialize git environment for Netzhaut development."
--dev git
{
    chdir()

    // Add git post-commit hook.
    system("echo -e \'#!/bin/sh\\nSCRIPT_DIR=$( cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\\nxargs -o $SCRIPT_DIR/../../bin/nhdocs --tag\' > .git/hooks/post-commit")
    system("chmod +x .git/hooks/post-commit")

    // Add git post-merge hook.
    system("echo -e \'#!/bin/sh\\nSCRIPT_DIR=$( cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\\nxargs -o $SCRIPT_DIR/../../bin/nhdocs --tag\' > .git/hooks/post-merge")
    system("chmod +x .git/hooks/post-merge")

    // Push annotated tags in refs/tags that are missing from the remote but are pointing at commit-ish 
    // that are reachable from the refs being pushed.
    system("git config --local --add push.followTags true")
}

"Initialize Netzhaut documentation."
--dev docs
{
    chdir("external")

    // Download Netzhaut docs.
    system("git clone https://github.com/netzhaut-org/netzhaut.dev")

    chdir()
}

// INCLUDES ========================================================================================

"Generate Netzhaut include files."
--inc
{
    // Create include directory.
    chdir()
    mkdirr("include/netzhaut/")

    // Copy include files.
    copy("src/lib/nhapi/nhapi.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhcore.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhtty.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhencoding.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhwsi.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhgfx.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhhtml.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhwebidl.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhdom.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhcss.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhterminal.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhrenderer.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhecmascript.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhurl.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhmake.h", "include/netzhaut/")
    copy("src/lib/nhapi/nhdocs.h", "include/netzhaut/")
}

"Install Netzhaut include files."
--inc install
{
    copy("include/netzhaut", "/usr/local/include", true, true)
}

// DOCS ============================================================================================

"Adopt new git commits to the changelog and create patch files."
--docs adopt 
{
    chdir()
    system("./bin/nhdocs --adopt 
        external/netzhaut.dev/docs/changelog/CHANGELOG.txt
        external/netzhaut.dev/docs/patches/raw"
    )
}

"Generate documentation based on changelog and patch files. This requires doxygen."
--docs generate
{
    chdir()
    system("./bin/nhdocs --generate_patch_pages 
        external/netzhaut.dev/docs/changelog/CHANGELOG.txt
        external/netzhaut.dev/docs/patches/raw
        external/netzhaut.dev/docs/patches/pages"
    )
    system("./bin/nhdocs --generate_headers
        external/netzhaut.dev/docs/changelog/CHANGELOG.txt
        external/netzhaut.dev/docs/theme/header/general/index.html
        external/netzhaut.dev/docs/theme/header/general/build.html
        external/netzhaut.dev/docs/theme/header/general/authors.html
        external/netzhaut.dev/docs/theme/header/general/license.html
        external/netzhaut.dev/docs/theme/header/architecture/index.html
        external/netzhaut.dev/docs/theme/header/architecture/systemarchitecture.html
        external/netzhaut.dev/docs/theme/header/architecture/enginearchitecture.html
        external/netzhaut.dev/docs/theme/header/design/index.html
        external/netzhaut.dev/docs/theme/header/design/libs.html
        external/netzhaut.dev/docs/theme/header/design/bins.html
        external/netzhaut.dev/docs/theme/header/internals.html
        external/netzhaut.dev/docs/theme/header/api.html
        external/netzhaut.dev/docs/theme/header/changelog.html
        external/netzhaut.dev/docs/theme/header/patches.html"
    )
    system("./bin/nhdocs --generate_html_page
        external/netzhaut.dev/docs/index.html.in
        external/netzhaut.dev/docs/theme/header/general/index.html
        external/netzhaut.dev/docs/theme/footer2.html"
    )
    system("./bin/nhdocs --generate_html_page
        external/netzhaut.dev/docs/general/html/build.html.in
        external/netzhaut.dev/docs/theme/header/general/build.html
        external/netzhaut.dev/docs/theme/footer2.html"
    )
    system("./bin/nhdocs --generate_html_page
        external/netzhaut.dev/docs/general/html/authors.html.in
        external/netzhaut.dev/docs/theme/header/general/authors.html
        external/netzhaut.dev/docs/theme/footer2.html"
    )
    system("./bin/nhdocs --generate_html_page
        external/netzhaut.dev/docs/general/html/license.html.in
        external/netzhaut.dev/docs/theme/header/general/license.html
        external/netzhaut.dev/docs/theme/footer2.html"
    )
    system("./bin/nhdocs --generate_html_page
        external/netzhaut.dev/docs/architecture/html/index.html.in
        external/netzhaut.dev/docs/theme/header/architecture/index.html
        external/netzhaut.dev/docs/theme/footer2.html"
    )
    system("./bin/nhdocs --generate_html_page
        external/netzhaut.dev/docs/architecture/html/systemarchitecture.html.in
        external/netzhaut.dev/docs/theme/header/architecture/systemarchitecture.html
        external/netzhaut.dev/docs/theme/footer2.html"
    )
    system("./bin/nhdocs --generate_html_page
        external/netzhaut.dev/docs/architecture/html/enginearchitecture.html.in
        external/netzhaut.dev/docs/theme/header/architecture/enginearchitecture.html
        external/netzhaut.dev/docs/theme/footer2.html"
    )
    system("./bin/nhdocs --generate_html_page
        external/netzhaut.dev/docs/design/html/index.html.in
        external/netzhaut.dev/docs/theme/header/design/index.html
        external/netzhaut.dev/docs/theme/footer2.html"
    )
    system("./bin/nhdocs --generate_changelogs
        external/netzhaut.dev/docs/changelog/CHANGELOG.txt
        external/netzhaut.dev/docs/changelog/main.md
        external/netzhaut.dev/docs/changelog/pages"
    )
    chdir("external/netzhaut.dev/docs")
    system("./doxygen.sh")
}

// SHOW ============================================================================================

"[dev] Show versions of all source contexts."
--show versions
{
    chdir()
    printVersions()
}

"[dev] Show full changelog."
--show changelog 
{
    chdir()
    printChangelog("CHANGELOG.txt")
}

"[dev] Show current documented changes."
--show changes
{
    chdir()
    printChangelog("CHANGES.txt")
}

// GLSL ============================================================================================

"[dev] Download and build glslang."
--glsl download
{
    chdir("external")
    system("wget -O tmp.zip https://github.com/KhronosGroup/glslang/archive/master.zip")
    system("unzip -o tmp.zip")
    system("rm tmp.zip")
    chdir("glslang-main")
    system("cmake -DENABLE_OPT=0 . && make")
    chdir()
}

"[dev] Compile GLSL shaders."
--glsl compile
{
    mkdir("src/lib/nhrenderer/Common/Data")
    mkdir("src/lib/nhrenderer/Common/Data/GLSL")
    mkdir("src/lib/nhrenderer/Common/Data/GLSL/Main")
    mkdir("src/lib/nhterminal/Common/Data")
    mkdir("src/lib/nhterminal/Common/Data/GLSL")

    chdir("external/glslang-main/StandAlone")
    system("./glslangValidator -V -x -o ../../../src/lib/nhrenderer/Common/Data/GLSL/Main/Color.vert.inc ../../../build/.glsl/nhrenderer/Main/Color.vert")
    system("./glslangValidator -V -x -o ../../../src/lib/nhrenderer/Common/Data/GLSL/Main/Color.frag.inc ../../../build/.glsl/nhrenderer/Main/Color.frag")
    system("./glslangValidator -V -x -o ../../../src/lib/nhrenderer/Common/Data/GLSL/Main/BackgroundImage.vert.inc ../../../build/.glsl/nhrenderer/Main/BackgroundImage.vert")
    system("./glslangValidator -V -x -o ../../../src/lib/nhrenderer/Common/Data/GLSL/Main/BackgroundImage.frag.inc ../../../build/.glsl/nhrenderer/Main/BackgroundImage.frag")
    system("./glslangValidator -V -x -o ../../../src/lib/nhrenderer/Common/Data/GLSL/Main/Image.vert.inc ../../../build/.glsl/nhrenderer/Main/Image.vert")
    system("./glslangValidator -V -x -o ../../../src/lib/nhrenderer/Common/Data/GLSL/Main/Image.frag.inc ../../../build/.glsl/nhrenderer/Main/Image.frag")
    system("./glslangValidator -V -x -o ../../../src/lib/nhrenderer/Common/Data/GLSL/Main/TextSDF.vert.inc ../../../build/.glsl/nhrenderer/Main/TextSDF.vert")
    system("./glslangValidator -V -x -o ../../../src/lib/nhrenderer/Common/Data/GLSL/Main/TextSDF.frag.inc ../../../build/.glsl/nhrenderer/Main/TextSDF.frag")
    system("./glslangValidator -V -x -o ../../../src/lib/nhterminal/Common/Data/GLSL/TextSDF.vert.inc ../../../build/.glsl/nhterminal/TextSDF.vert")
    system("./glslangValidator -V -x -o ../../../src/lib/nhterminal/Common/Data/GLSL/TextSDF.frag.inc ../../../build/.glsl/nhterminal/TextSDF.frag")
    chdir()
}

